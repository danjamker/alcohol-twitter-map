{"ts":1375953804336,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\n * Module dependencies.\n */\n\nvar express = require('express')\n  , routes = require('./routes')\n  , user = require('./routes/user')\n  , http = require('http')\n  , path = require('path');\n\nvar app = express();\n\n// all environments\napp.set('port', process.env.PORT || 3000);\napp.set('views', __dirname + '/views');\napp.set('view engine', 'jade');\napp.use(express.favicon());\napp.use(express.logger('dev'));\napp.use(express.bodyParser());\napp.use(express.methodOverride());\napp.use(app.router);\napp.use(express.static(path.join(__dirname, 'public')));\n\n// development only\nif ('development' == app.get('env')) {\n  app.use(express.errorHandler());\n}\n\napp.get('/', routes.index);\napp.get('/users', user.list);\n\nhttp.createServer(app).listen(app.get('port'), function(){\n  console.log('Express server listening on port ' + app.get('port'));\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":843}]],"length":843}
{"contributors":[],"silentsave":false,"ts":1376342870796,"patch":[[{"diffs":[[0,"t('/"],[-1,"users', user.list);"],[1,":Z/:X/:Y.json', function (req, res) {\n    res.send('Hello World');\n})\n"],[0,"\n\nht"]],"start1":685,"start2":685,"length1":27,"length2":78}]],"length":894,"saved":false}
{"ts":1376343441212,"patch":[[{"diffs":[[0,"send"],[-1,"('Hello World'"],[1,"file(\"./tmm.json\""],[0,");\n}"]],"start1":735,"start2":735,"length1":22,"length2":25}]],"length":897,"saved":false}
{"ts":1376343509377,"patch":[[{"diffs":[[0,"le(\"./tm"],[-1,"m"],[1,"p"],[0,".json\");"]],"start1":741,"start2":741,"length1":17,"length2":17}]],"length":897,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376686260835,"patch":[[{"diffs":[[0,"t('/"],[-1,":Z/:X/:Y"],[1,"National"],[0,".jso"]],"start1":685,"start2":685,"length1":16,"length2":16},{"diffs":[[0,"(\"./"],[-1,"tmp.json\");\n})\n"],[1,"GeoJSON/National.json\");\n})\napp.get('/Regional.json', function (req, res) {\n    res.sendfile(\"./GeoJSON/Regional.json\");\n})"],[0,"\n\nht"]],"start1":743,"start2":743,"length1":23,"length2":131}]],"length":1005,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378148921713,"patch":[[{"diffs":[[0,"index);\n"],[1,"\napp.get('/geoJSON/{x}/{y}/{z}.json', function (req, res) {\n    res.sendfile(\"./GeoJSON/National.json\");\n})\n\n"],[0,"app.get("]],"start1":671,"start2":671,"length1":16,"length2":125}]],"length":1114,"saved":false}
{"ts":1378150318122,"patch":[[{"diffs":[[0,"/{y}"],[-1,"/{z}"],[0,".jso"]],"start1":701,"start2":701,"length1":12,"length2":8}]],"length":1110,"saved":false}
{"ts":1378153835585,"patch":[[{"diffs":[[0,"('path')"],[-1,";"],[0,"\n"],[1,"  , mongo = require('mongodb');"],[0,"\nvar app"]],"start1":181,"start2":181,"length1":18,"length2":48},{"diffs":[[0,"());\n}\n\n"],[1,"\n\nvar mongoUri = process.env.MONGOLAB_URI ||\n  process.env.MONGOHQ_URL ||\n  'mongodb://localhost/mydb';\n\nmongo.Db.connect(mongoUri, function (err, db) {\n  db.collection('mydocs', function(er, collection) {\n    collection.insert({'mykey': 'myvalue'}, {safe: true}, function(er,rs) {\n    });\n  });\n});\n\n"],[0,"app.get("]],"start1":673,"start2":673,"length1":16,"length2":317}]],"length":1441,"saved":false}
{"ts":1378154671999,"patch":[[{"diffs":[[0,"godb');\n"],[1,"  \n"],[0,"var app "]],"start1":214,"start2":214,"length1":16,"length2":19},{"diffs":[[0,"i = "],[-1,"process.env.MONGOLAB_URI ||\n  process.env.MONGOHQ_URL ||\n  'mongodb://localhost/mydb';"],[1," mongodb://danjamker:apple@ds027668.mongolab.com:27668/geolocations"],[0,"\n\nmo"]],"start1":697,"start2":697,"length1":94,"length2":75},{"diffs":[[0,", db) {\n"],[-1," "],[0," db.coll"]],"start1":810,"start2":810,"length1":17,"length2":16},{"diffs":[[0,"on('"],[-1,"mydocs', function(er, collection) {\n    collection.insert({'mykey': 'myvalue'}, {safe: true}, function(er,rs) {\n    });\n "],[1,"UKPostcode').find({ loc :\n                  { $geoWithin :\n                    { $geometry :\n                      { type : \"Polygon\" ,\n                        coordinates : [ [\n                                          [ 0 , 0 ] ,\n                                          [ 3 , 6 ] ,\n                                          [ 6 , 1 ] ,\n                                          [ 0 , 0 ]\n                                        ] ]\n                } } }"],[0," });"]],"start1":830,"start2":830,"length1":129,"length2":465},{"diffs":[[0,"SON/"],[-1,"{x}/{y}"],[1,":x/:y/:e/:w/:q"],[0,".jso"]],"start1":1344,"start2":1344,"length1":15,"length2":22},{"diffs":[[0,"on (req, res) {\n"],[1,"    \n    mongo.Db.connect(mongoUri, function (err, db) {\n        var tmp = [[req.params.y,req.params.e],[req.params.w,req.params.q]]\n      db.collection('places').find({loc: {$within: {$box: tmp}}).toArray(function(err, docs) {\n        if(err) return console.dir(err)\n    \n        assert.equal(docs.length, 2);\n      });\n      \n});\n    \n"],[0,"    res.sendfile"]],"start1":1376,"start2":1376,"length1":32,"length2":369}]],"length":2104,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378460076629,"patch":[[{"diffs":[[0,", mo"],[-1,"ngo = require('mongodb');\n  \nvar app = express();\n\n// all environments\napp.set('port', process.env.PORT || 3000);\napp.set('views', __dirname + '/views');\napp.set('view engine', 'jade');\napp.use(express.favicon());\napp.use(express.logger('dev'));\napp.use(express.bodyParser());\napp.use(express.methodOverride());\napp.use(app.router);\napp.use(express.static(path.join(__dirname, 'public')));\n\n// development only\nif ('development' == app.get('env')) {\n  app.use(express.errorHandler());\n}\n\n\n\nvar mongoU"],[1,"ment = require('moment');\n\n\n  var Db = require('mongodb').Db,\n    MongoClient = require('mongodb').MongoClient,\n    Server = require('mongodb').Server,\n    ReplSetServers = require('mongodb').ReplSetServers,\n    ObjectID = require('mongodb').ObjectID,\n    Binary = require('mongodb').Binary,\n    GridStore = require('mongodb').GridStore,\n    Grid = require('mongodb').Grid,\n    Code = require('mongodb').Code,\n    BSON = require('mongodb').pure().BSON,\n    DataProvider = require('./dataprovider').DataProvider,\n    WordProvider = require('./wordfreqProvider').WordProvider,\n    PostCodeProvider = require('./postcodeprovider').PostCodeProvider;\n\n\nvar sort = function (list) {\n \n    var comparisons = 0,\n        swaps = 0,\n        endIndex = 0,\n        len = list.length - 1,\n        hasSwap = true;\n \n    for (var i = 0; i < len; i++) {\n \n        hasSwap = false;\n \n        for (var j = 0, swapping, endIndex = len - i; j < endIndex; j++) {\n            comparisons++;\n\n            if (moment(list[j][0]).isAfter(list[j + 1][0])) {\n         \n                swapping = list[j];\n \n                list[j] = list[j + 1];\n                list[j + 1] = swapping;\n \n                swaps++;\n                hasSwap = true;\n            };\n        };\n \n        if (!hasSwap) {\n            break;\n        }\n    }\n \n    console.log(\"--Bubble Sort--\")\n    console.log(\"Comparisons: \" + comparisons);\n    console.log(\"Swaps: \" + swaps);\n                 \n    return list;\n};\n\nvar sortd = function (list) {\n \n    var comparisons = 0,\n        swaps = 0,\n        endIndex = 0,\n        len = list.length - 1,\n        hasSwap = true;\n \n    for (var i = 0; i < len; i++) {\n \n        hasSwap = false;\n \n        for (var j = 0, swapping, endIndex = len - i; j < endIndex; j++) {\n            comparisons++;\n\n            if (moment(list[j][\"time\"]).isAfter(list[j + 1][\"time\"])) {\n         \n                swapping = list[j];\n \n                list[j] = list[j + 1];\n                list[j + 1] = swapping;\n \n                swaps++;\n                hasSwap = true;\n            };\n        };\n \n        if (!hasSwap) {\n            break;\n        }\n    }\n \n    console.log(\"--Bubble Sort--\")\n    console.log(\"Comparisons: \" + comparisons);\n    console.log(\"Swaps: \" + swaps);\n                 \n    return list;\n};\n\nvar app = express();\n\n// all environments\napp.set('port', process.env.PORT || 3000);\napp.set('views', __dirname + '/views');\napp.set('view engine', 'jade');\napp.use(express.favicon());\napp.use(express.logger('dev'));\napp.use(express.bodyParser());\napp.use(express.methodOverride());\napp.use(app.router);\napp.use(express.static(path.join(__dirname, 'public')));\nvar dataProvider = new DataProvider('localhost', 27017);\nvar wordProvider = new WordProvider('localhost', 27017);\n\n// development only\nif ('development' == app.get('env')) {\n  app.use(express.errorHandler());\n}\n\n\n\n\napp.get('/', function (req, res){\n res.render('index', {\n              menu:\"index\"\n          });\n});\n\napp.get('/about', function (req, res){\n res.render('about', {\n              menu:\"about\"\n          });\n});\n\n\napp.get('/geoJSON/:x/:y/:e/:w/:q.json', function (req, res) {\n    \n    query = {\n    \"loc\": {\n        \"$geoWithin\": {\n            \"$geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            req.params.e,req.params.y\n                        ],\n                        [\n                            req.params.e,req.params.w\n                        ],\n                        [\n                           req.params.q,req.params.w\n                        ],\n                        [\n                            req.params.q,req.params.y\n                        ],                        \n                        [\n                            req.params.e,req.params.y\n                        ]\n                    ]\n                ]\n            }\n        }\n    }\n};\n      var u"],[0,"ri =  "],[1," \""],[0,"mong"]],"start1":192,"start2":192,"length1":514,"length2":3973},{"diffs":[[0,"ions"],[-1,"\n\nmongo.Db.connect(mongoUri"],[1,"\";\n      MongoClient.connect(uri, { server: { auto_reconnect: true } }"],[0,", fu"]],"start1":4223,"start2":4223,"length1":35,"length2":78},{"diffs":[[0,", db) {\n"],[1,"         "],[0," db.coll"]],"start1":4312,"start2":4312,"length1":16,"length2":25},{"diffs":[[0,"nd({"],[1,"\n             "],[0," loc"],[-1," "],[0,":"],[1," {"],[0,"\n   "]],"start1":4360,"start2":4360,"length1":14,"length2":29},{"diffs":[[0,"            "],[-1," {"],[0," $geoWithin "]],"start1":4391,"start2":4391,"length1":26,"length2":24},{"diffs":[[0,"eoWithin"],[-1," "],[0,":"],[1," {"],[0,"\n       "]],"start1":4406,"start2":4406,"length1":18,"length2":19},{"diffs":[[0,"        "],[-1,"{"],[1," "],[0," $geomet"]],"start1":4430,"start2":4430,"length1":17,"length2":17},{"diffs":[[0,"geometry"],[-1," "],[0,":"],[1," {"],[0,"\n       "]],"start1":4441,"start2":4441,"length1":18,"length2":19},{"diffs":[[0,"    "],[-1,"{"],[1,"   "],[0," type"],[-1," "],[0,": \"P"]],"start1":4471,"start2":4471,"length1":15,"length2":16},{"diffs":[[0,"Polygon\""],[-1," "],[0,",\n      "]],"start1":4486,"start2":4486,"length1":17,"length2":16},{"diffs":[[0,"        "],[1,"  "],[0,"coordina"]],"start1":4512,"start2":4512,"length1":16,"length2":18},{"diffs":[[0,"ates"],[-1," "],[0,": ["],[1,"\n                             "],[0," [\n "]],"start1":4529,"start2":4529,"length1":12,"length2":41},{"diffs":[[0,"                "],[1,"           [\n"],[0,"                "]],"start1":4576,"start2":4576,"length1":32,"length2":45},{"diffs":[[0,"    "],[-1,"[ 0 , 0 ] ,"],[1,"                   parseFloat(req.params.e),parseFloat(req.params.y)\n                                  ],\n                                  [\n                                      parseFloat(req.params.e),parseFloat(req.params.w)"],[0,"\n   "]],"start1":4620,"start2":4620,"length1":19,"length2":237},{"diffs":[[0,"                "],[1,"           ],\n"],[0,"                "]],"start1":4861,"start2":4861,"length1":32,"length2":46},{"diffs":[[0,"    "],[-1,"[ 3 , 6 ] ,\n                                          [ 6 , 1 ] ,"],[1,"               [\n                                     parseFloat(req.params.q),parseFloat(req.params.w)\n                                  ],\n                                  [\n                                      parseFloat(req.params.q),parseFloat(req.params.y)\n                                  ],                        \n                                  [\n                                      parseFloat(req.params.e),parseFloat(req.params.y)\n                                  ]\n                              ]"],[0,"\n   "]],"start1":4906,"start2":4906,"length1":73,"length2":525},{"diffs":[[0,"                "],[1,"  ]\n"],[0,"                "]],"start1":5436,"start2":5436,"length1":32,"length2":36},{"diffs":[[0,"    "],[-1,"[ 0 , 0 ]\n                                        ] ]\n                } } } });\n});\n\napp.get('/', routes.index);\n\napp.get('/geoJSON/:x/:y/:e/:w/:q.json', function (req, res) {\n    \n    mongo.Db.connect(mongoUri, function (err, db) {\n        var tmp = [[req.params.y,req.params.e],[req.params.w,req.params.q]]\n      db.collection('places').find({loc: {$within: {$box: tmp}}).toArray(function(err, docs) {\n        if(err) return console.dir(err)\n    \n        assert.equal(docs.length, 2);\n      });\n      \n});\n    \n    res.sendfile(\"./GeoJSON/National.json\");\n})\n\napp.get('/National.json', function (req, res) {\n    res.sendfile(\"./GeoJSON/National.json\");\n})\napp.get('/Regional.json', function (req, res) {\n    res.sendfile(\"./GeoJSON/Regional.json\""],[1,"    }\n                  }\n              }\n          }).toArray(function(err, docs) {\n\n                lols = []\n                for (var i = 0; i < docs.length; i++) {\n                  tmp = {\"type\":\"Feature\",\n                          \"geometry\":{\"type\":\"Polygon\",\n                            \"coordinates\":docs[i].loc.coordinates},\n                            \"properties\":{\"id\":docs[i].id}\n                          }\n                          lols.push(tmp)\n\n    //Do something\n                }\n                tmp = { \"type\": \"FeatureCollection\",\n                        \"features\":lols\n                      }\n                res.json(tmp);\n              });  \n            });\n     \n    //res.sendfile(\"./GeoJSON/National.json\");\n})\n\napp.get('/National.json', function (req, res) {\n    res.sendfile(\"./GeoJSON/National.json\");\n})\napp.get('/Regional.json', function (req, res) {\n    res.sendfile(\"./GeoJSON/Regional.json\");\n})\n\napp.get('/:postcode', function (req, res) {\n  var postcodeProvider = new PostCodeProvider('mongodb://danjamker:apple@ds027668.mongolab.com:27668');\n\n  dataProvider.findAll(req.params.postcode.replace(/\\s+/g, '-'), function(error, emps){\n\n        data = []\n        scores = []\n\n        for (var i = 0; i < emps.length; i++) {\n          element = emps[i];\n          if(element.type == \"daily\"){\n            data.push([element.time,element.score])\n          }\n        }\n\n          list = sort(data)\n\n          tmp = []\n          for(var i = 0; i < list.length; i++){\n            tmp.push(moment(list[i][0]).format('dddd'))\n            scores.push(list[i][1])\n          }\n          // Do something with element i.\n        \n        wordProvider.findAll(req.params.postcode.replace(/\\s+/g, '-'), function(errors, word){\n              \n              tfvodka = []\n              tfdrunk = []\n              tfhungover = []\n              tfhangover = []\n              tfwasted = []\n              tfpissed = []\n              tfwine = []\n\n              tpvodka = []\n              tpdrunk = []\n              tphungover = []\n              tphangover = []\n              tpwasted = []\n              tppissed = []\n              tpwine = []\n\n              tweetCount = []\n\n              list = sortd(word)\n\n              for(var i = 0; i < list.length; i++){\n                tfvodka.push(list[i][\"termfreq\"][\"vodka\"])\n                tfdrunk.push(list[i][\"termfreq\"][\"drunk\"])\n                tfhungover.push( list[i][\"termfreq\"][\"hungover\"])\n                tfhangover.push(list[i][\"termfreq\"][\"hangover\"])\n                tfwasted.push(list[i][\"termfreq\"][\"wasted\"])\n                tfpissed.push(list[i][\"termfreq\"][\"pissed\"])\n                tfwine.push(list[i][\"termfreq\"][\"wine\"])\n\n                tpvodka.push(list[i][\"termprob\"][\"vodka\"])\n                tpdrunk.push(list[i][\"termprob\"][\"drunk\"])\n                tphungover.push(list[i][\"termprob\"][\"hungover\"])\n                tphangover.push(list[i][\"termprob\"][\"hangover\"])\n                tpwasted.push(list[i][\"termprob\"][\"wasted\"])\n                tppissed.push(list[i][\"termprob\"][\"pissed\"])\n                tpwine.push(list[i][\"termprob\"][\"wine\"])\n\n                tweetCount.push(list[i][\"tweetCount\"])\n              }\n\n              var postcode = \"\";\n              var postcodeRegon = \"\";\n              var regon = \"\";\n             \n\n              var uri =   \"mongodb://danjamker:apple@ds027668.mongolab.com:27668/geolocations\";\n      MongoClient.connect(uri, { server: { auto_reconnect: true } }, function (err, db) {\n          db.collection('Postcodelookup').find({\n            $or : \n            [{ postRegon:req.params.postcode },{postcode:req.params.postcode},{postcoderegon:req.params.postcode}]\n          }).toArray(function(err, docs){\n\n              vara = \"\"\n              varb = \"\"\n              varc = \"\"\n\n              varx = false\n              vary = false\n              varz = false\n              for(var j = 0; j < docs.length ; j++){\n                console.log(docs[j])\n                if(req.params.postcode == docs[j][\"postRegon\"]){\n                  varx = true\n                }\n                if(req.params.postcode == docs[j][\"postcode\"]){\n                  vary = true\n                }                \n                if(req.params.postcode == docs[j][\"postcoderegon\"]){\n                  varz = true\n                }\n                vara = docs[j][\"postRegon\"]\n                varb = docs[j][\"postcode\"]\n                varc = docs[j][\"postcoderegon\"]\n\n              }\n\n              res.render('postcode', {\n              title: req.params.postcode,\n              days: JSON.stringify(tmp),\n              scores: scores,\n              menu:\"postcode\",\n              tfvodka:tfvodka,\n              tfdrunk :tfdrunk,\n              tfhungover: tfhungover,\n              tfhangover:tfhangover,\n              tfwasted :tfwasted,\n              tfpissed :tfpissed,\n              tfwine :tfwine,\n\n              tpvodka:tpvodka,\n              tpdrunk :tpdrunk,\n              tphungover: tphungover,\n              tphangover :tphangover,\n              tpwasted :tpwasted,\n              tppissed :tppissed,\n              tpwine :tpwine,\n              tweetCount:tweetCount,\n              vara:vara,\n              varb:varb,\n              varc:varc,\n              varx:varx,\n              vary:vary,\n              varz:varz \n\n\n              })\n          })});\n              \n\n\n\n\n\n\n\n\n\n\n        });\n    }"],[0,");\n}"]],"start1":5470,"start2":5470,"length1":756,"length2":5416}]],"length":11022,"saved":false}
